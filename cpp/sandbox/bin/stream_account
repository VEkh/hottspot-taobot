#!/bin/bash
# shellcheck disable=2009

set -e
shopt -s extglob

app_dir=$(realpath "$(dirname "$0")/../../")
data_dir="$app_dir/data/"
fmt_bold="\033[1m"
fmt_cyan="\033[36m"
fmt_green="\033[32m"
fmt_red="\033[31m"
fmt_reset="\033[0m"
fmt_underline="\033[4m"
fmt_yellow="\033[33m"
project=$(dirname "$0" | xargs basename)

# shellcheck disable=1090
source "${app_dir}/bin/utils" # ascii_print, extract_flags, to_lower, to_upper

if [[ $project = "bin" ]]; then
  cmd=$(basename "$0")

  echo -e "${fmt_bold}${fmt_red}Please run in the context of" \
  "a project (e.g. ./bin/<project>/$cmd)${fmt_reset}"

  exit 1;
fi

flags=($(extract_flags "${@}"))

declare -A flag_map
extract_flags_to_map flag_map "${flags[@]}"

api_key="${flag_map["api-key"]}"

if [[ "${project}" = "alpaca" && -z "${api_key}" ]]; then
  ascii_print "You must provide an --api-key=<API_KEY> option" "red" >&2
  exit 1
fi

echo -e "${fmt_bold}${fmt_cyan}"
date
echo

function get_status() {
  state=$(
    ps aux |
    grep "[s]tream_account" |
    grep -vE "heartbeat|restart|status|stop" |
    grep "${project}" |
    grep --color "${api_key}"
  )

  echo -e "${state}"
}

function print_status() {
  state=$(get_status)

  if [[ -z "${state}" ]]; then
    echo -e "${fmt_green}âœ… Account is not streaming."
  else
    printf "%b" "$fmt_reset"
    get_status
  fi
}

function start_if_stopped() {
  state=$(get_status)

  if [[ -z "${state}" ]]; then
    echo -e "${fmt_green}ðŸ˜´ Account is not streaming. Starting stream.\n${fmt_reset}"
    start_stream "${@}"
  else
    echo -e "${fmt_cyan}ðŸ’– Account is streaming. Doing nothing.${fmt_reset}"
  fi
}

function start_stream() {
  log_dir="${app_dir}/log/${project}/${api_key}"
  log_file="${log_dir}/account_stream.log"
  project_data_dir="${data_dir}/${project}/${api_key}"

  mkdir -p "${log_dir}"
  mkdir -p "${project_data_dir}"

  ascii_print "Starting ${ASCII["normal"]}${ASCII["cyan"]}${api_key} ${ASCII["bold"]}${ASCII["yellow"]}Account Stream" "yellow"

  echo "{}" > "$project_data_dir/account.json"
  "${app_dir}/build/${project}" stream_account "${@}" > "${log_file}" 2>&1 &
}

function stop_stream() {
  state=$(get_status)

  if [[ -z "${state}" ]]; then
    echo -e "${fmt_green}âœ… Account is not streaming."
  else
    echo -e "${fmt_cyan}ðŸ›‘ Stopping Account Stream${fmt_reset}"

    get_status | awk '{print $2}' | xargs kill
  fi
}

case $1 in
  heartbeat)
    start_if_stopped "${@:2}"
    ;;

  restart)
    stop_stream
    start_stream "${@:2}"
    ;;

  start)
    start_stream "${@:2}"
    ;;

  status)
    print_status
    ;;

  stop)
    stop_stream

    ;;

  *)
    echo -e "${fmt_bold}${fmt_underline}${fmt_yellow}ðŸ¦™ ALPACA ACCOUNT STREAM${fmt_reset}\n"
    echo -e "${fmt_bold}${fmt_cyan}Description: Stream the brokerage account iinfo.${fmt_reset}\n"
    echo -e "${fmt_bold}${fmt_yellow}Usage: stream_account [COMMAND]\n"
    echo -e "Commands:"
    echo -e "  heartbeat               Check status. Restart if stopped."
    echo -e "  restart   <OPTIONS>     Stop, then start streaming. See stop and start documentation."
    echo -e "  start     <OPTIONS>     Start streaming with <OPTIONS> (e.g. --paper, etc.)."
    echo -e "  status                  Print running stream processes, if any."
    echo -e "  stop                    Stop streawming account."

    ;;
esac

printf "%b" "$fmt_reset"
