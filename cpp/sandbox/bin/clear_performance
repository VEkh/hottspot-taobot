#!/bin/bash

set -e
shopt -s extglob

app_dir=$(realpath "$(dirname "$0")/../../")
data_dir="${app_dir}/data/"
project=$(dirname "$0" | xargs basename)

# shellcheck disable=1090,1091
source "${app_dir}/bin/utils" # ascii_print, to_upper

if [[ "${project}" = "bin" ]]; then
  cmd=$(basename "${0}")

  ascii_print "Please run in the context of a project (e.g. ./bin/<project>/${cmd})" "red" >&2

  exit 1;
fi

flags=($(extract_flags "${@}"))

declare -A flag_map
extract_flags_to_map flag_map "${flags[@]}"

api_key="${flag_map["api-key"]}"

if [[ "${project}" = "alpaca" && -z "${api_key}" ]]; then
  ascii_print "You must provide an --api-key=<API_KEY> option" "red" >&2
  exit 1
fi

performance_dir="${data_dir}/${project}/performance/${api_key}"
mkdir -p "${performance_dir}"

function clear_performance() {
  symbol="$(to_upper "${1}")"

  echo "{}" > "${performance_dir}/${symbol}.json"
  ascii_print "Cleared ${symbol}'s performance" "yellow"
}

case $1 in
  +([[:alpha:]_[:alpha:]]))
    clear_performance "${1}"
    ;;

  *)
    symbols=()
    while IFS="" read -r line; do
      symbols+=("${line}")
    done < <(cat "${app_dir}/bin/${project}/symbols")

    for symbol in "${symbols[@]}"; do
      clear_performance "${symbol}"
    done
    ;;
esac
