#!/bin/bash

set -e

app_dir=$(realpath "$(dirname "${BASH_SOURCE[0]}")/../")
db_dir="${app_dir}/db"
config_filepath="$app_dir/config/db/credentials.json"

# shellcheck disable=1090
source "${app_dir}/bin/utils" # ASCII, ascii_print

function build_db_uri() {
  env="${ENV:-development}"

  if [[ ! -f "$config_filepath" ]]; then
    ascii_print "❗ Database config file does not exist.\n" "red" >&2
    ascii_print "Create it using ${config_filepath}.example" "yellow" >&2

    exit 1
  fi

  credentials=$(jq ".${env} // empty" "${config_filepath}")

  if [[ -z "${credentials}" ]]; then
    error_message=$(
      echo -e "❗ Database environment ${ASCII["yellow"]}${env}"\
              "${ASCII["red"]}is not specified in ${config_filepath}."
    )

    ascii_print "${error_message}" "red" >&2

    exit 1
  fi

  database_host="$(echo "${credentials}" | jq -r ".host // empty")"
  database_name="$(echo "${credentials}" | jq -r ".name")"
  database_password="$(echo "${credentials}" | jq -r ".password")"
  database_port="$(echo "${credentials}" | jq -r ".port // empty")"
  database_username="$(echo "${credentials}" | jq -r ".username")"

  # Fallbacks
  database_host="${database_host:-localhost}"
  database_port="${database_port:-5432}"

  uri="postgres://"
  uri+="${database_username}"
  uri+=":${database_password}"
  uri+="@${database_host}"
  uri+=":${database_port}"
  uri+="/${database_name}"

  echo -e "${uri}"
}

function migration_filename_to_version() {
  echo -e "${1}" |
  awk '{ match($0, /\/([[:digit:]]+).*\.sql$/, arr); print arr[1] }'
}

function migration_version_to_filename() {
  action="${2}"
  version="${1}"
  find "${db_dir}/migrations/${action}" -name "${version}_*.sql"
}
