#!/bin/bash

set -e


app_dir=$(realpath "$(dirname "$0")/../")

# shellcheck disable=1090
source "${app_dir}/bin/utils" # ASCII, ascii_print, get_env_flag, to_title

db_dir=$(realpath "$(dirname "${BASH_SOURCE[0]}")")
migrations_dir="${db_dir}/migrations"
scripts_dir="${db_dir}/scripts"

# shellcheck disable=1090
source "${db_dir}/migrations/bin/migrate_single" # migrate_single

# build_db_uri, migration_filename_to_version
# shellcheck disable=1090
source "${db_dir}/utils"
db_uri="$(build_db_uri "${@}")"
env=$(to_title "$(get_env_flag "${@}")")

ascii_print "ðŸ‘€ Rolling Back ${ASCII["red"]}${env}" "yellow"

db_cmd="psql ${db_uri} -t -v ORDER=\"desc\" < ${scripts_dir}/print_schema_migration_versions.sql"
db_versions=($(sh -c "${db_cmd}"))

migration_files=($(find "${migrations_dir}/down" -name "[0-9]*.sql" | sort -r))
rolled_back_version=""

i=0
while [[
  ! ${#db_versions[@]} = 0 &&
  -z "${rolled_back_version}" &&
  -n "${migration_files[i]}"
]]; do
  filename="${migration_files[i]}"
  version=$(migration_filename_to_version "${filename}")

  # shellcheck disable=2076
  if [[ " ${db_versions[*]} " =~ " ${version} " ]]; then
    migrate_single "down" "${version}" "${@}"
    rolled_back_version="${version}"
  fi

  i=$((i + 1))
done

if [[ -n "${rolled_back_version}" ]]; then
  success_msg=$(
    echo -e "ðŸŽ‰ Successfully rolled back" \
            "${ASCII["yellow"]} ${rolled_back_version}\n"
  )

  ascii_print "${success_msg}" "green"
else
  ascii_print "ðŸ˜“ No migrations to roll back" "yellow"
fi
