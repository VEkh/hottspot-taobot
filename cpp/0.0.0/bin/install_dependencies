#!/bin/bash
# shellcheck disable=2016

set -e

function build_app_dir() {
  echo -e "$(realpath "$(dirname "${BASH_SOURCE[0]}")/../")"
}

# shellcheck disable=1090,1091
source "$(build_app_dir)/bin/utils" # ASCII, ascii_print

function exempt_service_passwords() {
  content="%sudo ALL=(ALL) NOPASSWD: /usr/sbin/service"

  if [[ -f "/etc/sudoers.d/service_no_passwd" ]]; then
    existing_content=$(sudo cat "/etc/sudoers.d/service_no_passwd")

    if ( echo "${existing_content}" | grep -q "${content}" ); then
      return 0
    fi
  fi

  ascii_print "üìù Editing sudoers" "yellow"
  echo -e "${content}" | sudo tee /etc/sudoers.d/service_no_passwd > /dev/null
}

function install_apt_packages() {
  to_install=()

  for arg in "$@"; do
    if ! (dpkg -l | grep -v "^rc" | grep "$arg" | awk '{print $2}' | grep -q "^$arg\(:\w\+\)\?$"); then
      to_install+=("$arg")
    fi
  done

  [[ "${#to_install[*]}" = "0" ]] && return 0

  log_install_start "${to_install[*]}" && \
  sudo apt-get install -y "${to_install[@]}"

}

function install_asdf() {
  asdf_completion_cmd='. $HOME/.asdf/completions/asdf.bash'
  asdf_source_cmd='. $HOME/.asdf/asdf.sh'

  [ ! -d "${HOME}/.asdf" ] && \
    log_install_start "üíª asdf" && \
    git clone https://github.com/asdf-vm/asdf.git ~/.asdf

  bashrc_path="${HOME}/.bashrc"

  touch "${bashrc_path}"

  bashrc_contents=$(cat "${bashrc_path}")

  if ! (echo "${bashrc_contents}" | grep -q "${asdf_source_cmd}"); then
    echo -e "\n${asdf_source_cmd}" >> "${bashrc_path}"
  fi

  if ! (echo "${bashrc_contents}" | grep -q "${asdf_completion_cmd}"); then
    echo -e "\n${asdf_completion_cmd}" >> "${bashrc_path}"
  fi
}

function install_boost() {
  app_dir=$(build_app_dir)

  [ -d "$app_dir/deps/boost" ] && return 0

  log_install_start "‚ö° Boost"

  mkdir -p "$app_dir/deps/build/"

  git clone --recursive \
    "https://github.com/boostorg/boost.git" "$app_dir/deps/boost"

  cmd="cd $app_dir/deps/boost/"
  cmd+=" && ./bootstrap.sh"
  cmd+=" && ./b2 install --prefix=\"$app_dir/deps/build/\""

  sh -c "$cmd"
}

function install_brew_packages() {
  if [[ $(which brew) =~ .*not\\sfound.* ]]; then
    log_install_start "üç∫ Homerew Package Installer"
    /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  to_install=()

  for arg in "$@"; do
    if ! (brew list | grep "$arg" | grep -q "^$arg\(:\w\+\)\?$"); then
      to_install+=("$arg")
    fi
  done

  [[ "${#to_install[*]}" = "0" ]] && return 0

  log_install_start "${to_install[*]}" && \
    brew install "${to_install[@]}"
}

function install_cpp_dependencies() {
  log_install_start "C++ Dependencies"

  mkdir -p "$(build_app_dir)/deps/"

  install_boost
  install_nlohmann_json
}

function install_language_from_asdf() {
  asdf_bin="${HOME}/.asdf/bin/asdf"
  language="${1}"
  version="${2}"

  if [[ ! -d "${HOME}/.asdf" ]]; then
    ascii_print "‚ùó Install asdf before $(to_title "${language}") ${version}" "red"
    install_asdf
  fi

  [ ! -d "${HOME}/.asdf/plugins/${language}" ] && \
    log_install_start "$(to_title "${language}") plugin" && \
    "${asdf_bin}" plugin add "${language}"

  [ ! -d "${HOME}/.asdf/installs/${language}/${version}" ] && \
    log_install_start "üíª $(to_title "${language}") ${version}" && \
    "${asdf_bin}" install "${language}" "${version}" &&
    "${asdf_bin}" reshim "${language}"

  tool_versions_path="${app_dir}/.tool-versions"

  if [[ -f "${tool_versions_path}" ]]; then
    if ! (grep -q "\b${language}\b" "${tool_versions_path}"); then
      echo -e "${language} ${version}" >> "${tool_versions_path}"
    fi
  else
    echo -e "${language} ${version}" > "${tool_versions_path}"
  fi
}

function install_pgformatter() {
  if [[ -n $(which pg_format) ]]; then
    return 0
  fi

  log_install_start "üêòüòç pgFormatter"

  version=5.5
  wget https://github.com/darold/pgFormatter/archive/refs/tags/v${version}.tar.gz
  tar xzf v${version}.tar.gz
  cd pgFormatter-${version}/ || exit
  perl Makefile.PL
  make && sudo make install
  cd ../ && \rm -rf v${version}.tar.gz && rm -rf pgFormatter-${version} #clean up
}

function install_postgresql() {
  if [[ $OSTYPE =~ ^linux.* ]]; then
    package="postgresql"

    if (dpkg -l | grep -v "^rc" | grep "$package" | awk '{print $2}' | grep -q "^${package}\(:\w\+\)\?$"); then
      return 0;
    fi

    log_install_start "üêò PostgreSQL"

    install_apt_packages "lsb-release"

    sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | \
      sudo apt-key add -
    sudo apt-get update
    sudo apt-get -y install postgresql
  fi
}

function install_nlohmann_json() {
  app_dir=$(build_app_dir)

  [ -d "$app_dir/deps/nlohmann" ] && return 0

  log_install_start "{} nlohmann/json"

  git clone "https://github.com/nlohmann/json.git" /tmp/nlohmann/
  mv /tmp/nlohmann/single_include/nlohmann "$app_dir/deps/"
  'rm' -rf /tmp/nlohmann/
}

function install_python_dependencies() {
  app_dir=$(build_app_dir)
  log_install_start "üêç Python Dependencies"

  pip3 install -r "${app_dir}/deps/requirements.txt"
  asdf reshim python
}

function log_install_start() {
  ascii_print "üì¶ Installing ${ASCII["reset"]}${ASCII["cyan"]}${1}" "yellow"
}

if [[ $OSTYPE =~ ^linux.* ]]; then
  packages=(
    "clang-format" # C Formatting
    "g++" # C++
    "gcc" # C++
    "jq"
    "libcurl4-openssl-dev" # Curl Client
    "libffi-dev" # Python
    "libpq-dev" # LibPQ
    "netplan.io"
    "openssh-server" # sshd
    "openssl"
    "shellcheck" # Shell Formatting
  )

  sudo apt-get update
  install_apt_packages "${packages[@]}"
fi

[[ $OSTYPE =~ ^darwin.* ]] && install_brew_packages coreutils "openssl@3"

install_postgresql
install_pgformatter
install_asdf
install_language_from_asdf "python" "3.11.4"
install_cpp_dependencies
install_python_dependencies
exempt_service_passwords

ascii_print "üéâ Successfully installed dependencies!" "green"
